"""
XSS Penetration Testing Module - Simplified Version
"""

import re
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from playwright.sync_api import Page, Locator


@dataclass
class XSSPayload:
    name: str
    payload: str
    risk_level: str


@dataclass
class XSSResult:
    input_name: str
    payload: str
    is_vulnerable: bool
    response_snippet: str
    risk_level: str
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert XSSResult to dictionary for JSON serialization"""
        return {
            'input_name': self.input_name,
            'payload': self.payload,
            'is_vulnerable': self.is_vulnerable,
            'response_snippet': self.response_snippet,
            'risk_level': self.risk_level
        }


class XSSPentester:
    """XSS Penetration Tester - Simplified"""
    
    def __init__(self):
        self.payloads = [
            XSSPayload("Basic Script", "<script>alert('XSS')</script>", "high"),
            XSSPayload("Image Tag", "<img src=x onerror=alert('XSS')>", "high"),
            XSSPayload("SVG Tag", "<svg onload=alert('XSS')>", "high"),
            XSSPayload("Input Tag", "<input onfocus=alert('XSS') autofocus>", "medium"),
            XSSPayload("Link Tag", "<a href=javascript:alert('XSS')>Click</a>", "medium")
        ]
    
    def detect_xss_in_response(self, response_text: str, payload: str) -> Tuple[bool, str]:
        """Deteksi XSS dalam response"""
        # Cek apakah payload muncul dalam response
        if payload in response_text:
            return True, "Payload reflected"
        
        # Cek pattern XSS
        xss_patterns = [
            r'<script[^>]*>.*?alert\([^)]*\).*?</script>',
            r'<img[^>]*onerror[^>]*>',
            r'<svg[^>]*onload[^>]*>',
            r'<input[^>]*onfocus[^>]*>',
            r'javascript:alert\('
        ]
        
        for pattern in xss_patterns:
            if re.search(pattern, response_text, re.IGNORECASE):
                return True, "XSS pattern detected"
        
        return False, ""
    
    def test_form_inputs(self, page: Page, form_locator: Locator) -> List[XSSResult]:
        """Test XSS pada form inputs"""
        results = []
        
        try:
            # Ambil semua input dalam form
            inputs = form_locator.locator('input[type="text"], input[type="password"], textarea').all()
            
            for input_elem in inputs:
                input_name = input_elem.get_attribute('name') or 'unnamed'
                
                # Test dengan payload pertama saja untuk menghindari looping
                payload_obj = self.payloads[0]  # Basic Script
                
                try:
                    # Wait for element to be visible and enabled
                    input_elem.wait_for(state="visible", timeout=5000)
                    input_elem.clear()
                    input_elem.fill(payload_obj.payload)
                    
                    # Submit form
                    submit_btn = form_locator.locator('input[type="submit"], button[type="submit"]').first
                    if submit_btn.count() > 0:
                        submit_btn.click()
                        page.wait_for_timeout(2000)
                    
                    # Ambil response
                    response_text = page.content()
                    
                    # Deteksi XSS
                    is_vulnerable, snippet = self.detect_xss_in_response(response_text, payload_obj.payload)
                    
                    result = XSSResult(
                        input_name=input_name,
                        payload=payload_obj.payload,
                        is_vulnerable=is_vulnerable,
                        response_snippet=snippet[:200] if snippet else "",
                        risk_level=payload_obj.risk_level
                    )
                    
                    results.append(result.to_dict())
                    
                except Exception as e:
                    print(f"Error testing {input_name}: {e}")
                    continue
        
        except Exception as e:
            print(f"Error in XSS form testing: {e}")
        
        return results
    
    def run_xss_test(self, page: Page, url: str) -> Dict[str, Any]:
        """Jalankan XSS test pada halaman"""
        results = {
            'url': url,
            'form_tests': [],
            'summary': {
                'total_tests': 0,
                'vulnerabilities_found': 0,
                'high_vulnerabilities': 0
            }
        }
        
        try:
            page.goto(url)
            page.wait_for_load_state('networkidle')
            
            # Test semua form
            forms = page.locator('form').all()
            for form in forms:
                form_results = self.test_form_inputs(page, form)
                results['form_tests'].extend(form_results)
            
            # Calculate summary
            all_results = results['form_tests']
            results['summary']['total_tests'] = len(all_results)
            results['summary']['vulnerabilities_found'] = len([r for r in all_results if r.is_vulnerable])
            results['summary']['high_vulnerabilities'] = len([r for r in all_results if r.is_vulnerable and r.risk_level == 'high'])
        
        except Exception as e:
            results['error'] = str(e)
        
        return results