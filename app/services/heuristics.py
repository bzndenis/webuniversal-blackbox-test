"""Form detection and automated testing heuristics."""

from playwright.sync_api import Page, Locator
from typing import Dict, Any, List, Optional
import logging

logger = logging.getLogger(__name__)


def detect_forms(page: Page) -> List[Dict[str, Any]]:
    """
    Detect all forms on the page.
    
    Args:
        page: Playwright page object
        
    Returns:
        List of form information dictionaries
    """
    forms = []
    form_elements = page.locator('form')
    
    for i in range(form_elements.count()):
        form = form_elements.nth(i)
        
        form_info = {
            'index': i,
            'action': form.get_attribute('action') or '',
            'method': form.get_attribute('method') or 'GET',
            'inputs': []
        }
        
        # Find all inputs in this form
        inputs = form.locator('input, textarea, select')
        for j in range(inputs.count()):
            input_elem = inputs.nth(j)
            input_type = input_elem.get_attribute('type') or 'text'
            
            # Skip buttons and submits for now
            if input_type in ['submit', 'button', 'image', 'reset']:
                continue
            
            input_info = {
                'type': input_type,
                'name': input_elem.get_attribute('name') or '',
                'id': input_elem.get_attribute('id') or '',
                'required': input_elem.get_attribute('required') is not None,
                'placeholder': input_elem.get_attribute('placeholder') or ''
            }
            form_info['inputs'].append(input_info)
        
        forms.append(form_info)
    
    return forms


def generate_dummy_data(input_type: str, name: str = '', placeholder: str = '') -> str:
    """
    Generate dummy data based on input type and context.
    
    Args:
        input_type: HTML input type
        name: Input name attribute
        placeholder: Input placeholder text
        
    Returns:
        Dummy value string
    """
    name_lower = name.lower()
    placeholder_lower = placeholder.lower()
    
    # Email detection
    if input_type == 'email' or 'email' in name_lower or 'email' in placeholder_lower:
        return 'test@example.com'
    
    # Password detection
    if input_type == 'password' or 'password' in name_lower or 'pass' in name_lower:
        return 'Test123!@#'
    
    # Phone detection
    if input_type == 'tel' or 'phone' in name_lower or 'tel' in name_lower:
        return '+1234567890'
    
    # Number detection
    if input_type == 'number':
        return '42'
    
    # Date detection
    if input_type == 'date':
        return '2024-01-15'
    
    # Time detection
    if input_type == 'time':
        return '14:30'
    
    # URL detection
    if input_type == 'url' or 'url' in name_lower or 'website' in name_lower:
        return 'https://example.com'
    
    # Name detection
    if 'name' in name_lower or 'nama' in name_lower:
        if 'first' in name_lower or 'depan' in name_lower:
            return 'John'
        elif 'last' in name_lower or 'belakang' in name_lower:
            return 'Doe'
        else:
            return 'John Doe'
    
    # Address detection
    if 'address' in name_lower or 'alamat' in name_lower:
        return '123 Main Street, City, State 12345'
    
    # Textarea or message
    if input_type == 'textarea' or 'message' in name_lower or 'comment' in name_lower:
        return 'This is a test message generated by automated testing.'
    
    # Default text
    return 'Test Input'


def fill_form(
    page: Page,
    form_index: int = 0,
    submit: bool = False
) -> Dict[str, Any]:
    """
    Automatically fill a form with dummy data.
    
    Args:
        page: Playwright page object
        form_index: Index of form to fill (default: 0)
        submit: Whether to submit the form (default: False)
        
    Returns:
        Dictionary with fill results
    """
    result = {
        'form_index': form_index,
        'fields_filled': 0,
        'fields_failed': 0,
        'submitted': False,
        'errors': []
    }
    
    try:
        forms = page.locator('form')
        if forms.count() <= form_index:
            result['errors'].append(f"Form index {form_index} not found")
            return result
        
        form = forms.nth(form_index)
        
        # Fill text inputs
        text_inputs = form.locator('input[type="text"], input[type="email"], input[type="tel"], input[type="url"], input:not([type])')
        for i in range(text_inputs.count()):
            try:
                input_elem = text_inputs.nth(i)
                name = input_elem.get_attribute('name') or ''
                input_type = input_elem.get_attribute('type') or 'text'
                placeholder = input_elem.get_attribute('placeholder') or ''
                
                value = generate_dummy_data(input_type, name, placeholder)
                input_elem.fill(value)
                result['fields_filled'] += 1
                logger.debug(f"Filled input '{name}' with '{value}'")
            except Exception as e:
                result['fields_failed'] += 1
                result['errors'].append(f"Failed to fill input {i}: {str(e)}")
        
        # Fill textareas
        textareas = form.locator('textarea')
        for i in range(textareas.count()):
            try:
                textarea = textareas.nth(i)
                name = textarea.get_attribute('name') or ''
                value = generate_dummy_data('textarea', name)
                textarea.fill(value)
                result['fields_filled'] += 1
            except Exception as e:
                result['fields_failed'] += 1
                result['errors'].append(f"Failed to fill textarea {i}: {str(e)}")
        
        # Fill password inputs
        password_inputs = form.locator('input[type="password"]')
        for i in range(password_inputs.count()):
            try:
                password_inputs.nth(i).fill('Test123!@#')
                result['fields_filled'] += 1
            except Exception as e:
                result['fields_failed'] += 1
        
        # Fill number inputs
        number_inputs = form.locator('input[type="number"]')
        for i in range(number_inputs.count()):
            try:
                number_inputs.nth(i).fill('42')
                result['fields_filled'] += 1
            except Exception as e:
                result['fields_failed'] += 1
        
        # Handle selects
        selects = form.locator('select')
        for i in range(selects.count()):
            try:
                select = selects.nth(i)
                options = select.locator('option')
                if options.count() > 1:  # Skip if only placeholder
                    select.select_option(index=1)
                    result['fields_filled'] += 1
            except Exception as e:
                result['fields_failed'] += 1
        
        # Submit if requested
        if submit:
            try:
                # Look for submit button
                submit_button = form.locator('button[type="submit"], input[type="submit"]').first
                if submit_button.count() > 0:
                    submit_button.click()
                    result['submitted'] = True
                    page.wait_for_timeout(1000)  # Wait for submission
                else:
                    # Try to submit via form
                    form.evaluate('form => form.submit()')
                    result['submitted'] = True
            except Exception as e:
                result['errors'].append(f"Failed to submit form: {str(e)}")
    
    except Exception as e:
        result['errors'].append(f"Form filling error: {str(e)}")
    
    return result


def test_form_submission(
    page: Page,
    form_index: int = 0
) -> Dict[str, Any]:
    """
    Test form submission in sandbox mode.
    
    Args:
        page: Playwright page object
        form_index: Index of form to test
        
    Returns:
        Test result dictionary
    """
    result = {
        'success': False,
        'fill_result': None,
        'response_status': None,
        'has_error_message': False,
        'has_success_message': False,
        'errors': []
    }
    
    try:
        # Fill the form
        fill_result = fill_form(page, form_index, submit=False)
        result['fill_result'] = fill_result
        
        if fill_result['fields_filled'] == 0:
            result['errors'].append("No fields were filled")
            return result
        
        # Take screenshot before submit
        initial_url = page.url
        
        # Submit form
        forms = page.locator('form')
        form = forms.nth(form_index)
        submit_button = form.locator('button[type="submit"], input[type="submit"]').first
        
        if submit_button.count() > 0:
            submit_button.click()
            page.wait_for_timeout(2000)  # Wait for response
            
            # Check for common error indicators
            error_selectors = [
                '.error', '.alert-danger', '.invalid-feedback',
                '[role="alert"]', '.error-message'
            ]
            for selector in error_selectors:
                if page.locator(selector).count() > 0:
                    result['has_error_message'] = True
                    break
            
            # Check for success indicators
            success_selectors = [
                '.success', '.alert-success', '.success-message',
                '[role="status"]'
            ]
            for selector in success_selectors:
                if page.locator(selector).count() > 0:
                    result['has_success_message'] = True
                    break
            
            # Check if URL changed (redirect after submit)
            if page.url != initial_url:
                result['redirected'] = True
            
            result['success'] = True
        else:
            result['errors'].append("No submit button found")
    
    except Exception as e:
        result['errors'].append(f"Form test error: {str(e)}")
    
    return result


def perform_login(
    page: Page,
    login_url: str,
    username: str,
    password: str,
    success_indicator: Optional[str] = None,
    timeout_ms: int = 10000
) -> Dict[str, Any]:
    """
    Lakukan proses login menggunakan heuristik umum.

    Args:
        page: Objek Playwright Page
        login_url: URL halaman login
        username: Nilai username/email
        password: Nilai password
        success_indicator: Selector CSS atau teks yang menandakan login berhasil
        timeout_ms: Timeout operasi dalam milidetik

    Returns:
        Hasil proses login berisi status dan rincian langkah.
    """
    result: Dict[str, Any] = {
        "navigated": False,
        "filled_username": False,
        "filled_password": False,
        "clicked_submit": False,
        "success": False,
        "error": None
    }

    try:
        # Buka halaman login
        page.goto(login_url, wait_until="load", timeout=timeout_ms)
        page.wait_for_timeout(500)
        result["navigated"] = True

        # Cari field username/email (prioritaskan selector eksplisit jika ada di dataset global)
        username_locators = [
            'input[type="email"]',
            'input[name*="email" i]',
            'input[id*="email" i]',
            'input[name*="user" i]',
            'input[id*="user" i]',
            'input[type="text"]'
        ]
        password_locators = [
            'input[type="password"]',
            'input[name*="pass" i]',
            'input[id*="pass" i]'
        ]

        def find_first(locators: List[str]) -> Optional[Locator]:
            for sel in locators:
                loc = page.locator(sel).first
                try:
                    if loc.count() > 0:
                        return loc
                except Exception:
                    continue
            return None

        user_field = find_first(username_locators)
        pass_field = find_first(password_locators)

        if user_field is None or pass_field is None:
            raise RuntimeError("Username/password field not found on login page")

        try:
            user_field.fill(username)
            result["filled_username"] = True
        except Exception as e:
            logger.warning(f"Failed to fill username: {e}")

        try:
            pass_field.fill(password)
            result["filled_password"] = True
        except Exception as e:
            logger.warning(f"Failed to fill password: {e}")

        # Klik submit
        submit_locators = [
            'button[type="submit"]',
            'input[type="submit"]',
            'button:has-text("Login")',
            'button:has-text("Sign in")',
            'button:has-text("Masuk")'
        ]
        submit_btn = find_first(submit_locators)
        if submit_btn is None:
            # fallback: tekan Enter pada password field
            pass_field.press('Enter')
            result["clicked_submit"] = True
        else:
            submit_btn.click()
            result["clicked_submit"] = True

        # Tunggu settle setelah submit
        try:
            page.wait_for_load_state("networkidle", timeout=timeout_ms)
        except Exception:
            page.wait_for_timeout(1000)

        # Verifikasi sukses login bila ada indikator
        if success_indicator:
            # Coba sebagai selector CSS dulu
            try:
                if page.locator(success_indicator).count() > 0:
                    result["success"] = True
                else:
                    # Fallback: cek teks pada halaman
                    content = page.content()
                    result["success"] = success_indicator in (content or "")
            except Exception:
                content = page.content()
                result["success"] = success_indicator in (content or "")
        else:
            # Tanpa indikator spesifik, anggap sukses jika tidak ada error umum di halaman
            error_candidates = ['.error', '.alert-danger', '.invalid-feedback']
            has_errors = any(page.locator(sel).count() > 0 for sel in error_candidates)
            result["success"] = not has_errors

    except Exception as e:
        result["error"] = str(e)
        logger.error(f"Login error: {e}")

    return result
